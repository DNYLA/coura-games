// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique()
  status            String?
  // email     String
  password          String
  avatarUrl         String              @default("default.png")
  profileBanner     String?
  points            Int                 @default(0)
  joined            DateTime            @default(now())
  stats             Json? //Global Stats for user Weekly, Daily etc calculated via service
  friends           User[]              @relation("friends")
  friendsRelation   User[]              @relation("friends")
  Comments          Comment[]
  MatchPlayer       MatchPlayer[]
  Notification      Notification[]
  InboxParticipants InboxParticipants[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  authorId  Int
  toUserId  Int
  toUser    User      @relation(fields: [toUserId], references: [id])
  content   String
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Match {
  id       Int           @id @default(autoincrement())
  players  MatchPlayer[]
  playback Json?
  type     GameType
  createdAt DateTime @default(now())
}

model MatchPlayer {
  matchId Int
  userId  Int
  result  Result
  user    User   @relation(fields: [userId], references: [id])
  Match   Match? @relation(fields: [matchId], references: [id])

  @@id([matchId, userId])
}

model Inbox {
  id           Int                 @id @default(autoincrement())
  lastMessage  String
  lastSenderId Int
  read         Boolean             @default(false)
  messages     Message[]
  participants InboxParticipants[]
  updatedAt    DateTime            @updatedAt
}

model InboxParticipants {
  inboxId Int
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  Inbox   Inbox @relation(fields: [inboxId], references: [id])

  @@id([inboxId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  inboxId   Int
  userId    Int
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  Inbox     Inbox    @relation(fields: [inboxId], references: [id])
}

model Notification {
  id         Int                @id @default(autoincrement())
  targetId   Int
  targetUser User               @relation(fields: [targetId], references: [id])
  fromId     Int?
  action     String?
  message    String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  // fromUser User?
  type       NotificationType
  status     NotificationStatus @default(Unread)
}

enum FriendStatus {
  Accepted
  Rejected
  Pending
}

enum NotificationType {
  FriendRequest
  ProfileComment
  Invite
}

enum NotificationStatus {
  Unread
  Read
  Cancelled //e.g Friend request retracted we dont want to classify
}

enum GameType {
  RPS
  TicTacToe
}

enum Result {
  Win
  Loss
  Draw
}
